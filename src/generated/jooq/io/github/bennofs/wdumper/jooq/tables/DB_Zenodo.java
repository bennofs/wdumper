/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.Keys;
import io.github.bennofs.wdumper.jooq.enums.DB_ZenodoTarget;
import io.github.bennofs.wdumper.jooq.tables.records.DB_ZenodoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_Zenodo extends TableImpl<DB_ZenodoRecord> {

    private static final long serialVersionUID = -1241915696;

    /**
     * The reference instance of <code>zenodo</code>
     */
    public static final DB_Zenodo ZENODO = new DB_Zenodo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_ZenodoRecord> getRecordType() {
        return DB_ZenodoRecord.class;
    }

    /**
     * The column <code>zenodo.id</code>.
     */
    public final TableField<DB_ZenodoRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>zenodo.deposit_id</code>.
     */
    public final TableField<DB_ZenodoRecord, Integer> DEPOSIT_ID = createField(DSL.name("deposit_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zenodo.dump_id</code>.
     */
    public final TableField<DB_ZenodoRecord, Integer> DUMP_ID = createField(DSL.name("dump_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>zenodo.doi</code>.
     */
    public final TableField<DB_ZenodoRecord, String> DOI = createField(DSL.name("doi"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>zenodo.target</code>.
     */
    public final TableField<DB_ZenodoRecord, DB_ZenodoTarget> TARGET = createField(DSL.name("target"), org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(io.github.bennofs.wdumper.jooq.enums.DB_ZenodoTarget.class), this, "");

    /**
     * The column <code>zenodo.created_at</code>.
     */
    public final TableField<DB_ZenodoRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>zenodo.started_at</code>.
     */
    public final TableField<DB_ZenodoRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>zenodo.completed_at</code>.
     */
    public final TableField<DB_ZenodoRecord, LocalDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>zenodo.uploaded_bytes</code>.
     */
    public final TableField<DB_ZenodoRecord, Long> UPLOADED_BYTES = createField(DSL.name("uploaded_bytes"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>zenodo</code> table reference
     */
    public DB_Zenodo() {
        this(DSL.name("zenodo"), null);
    }

    /**
     * Create an aliased <code>zenodo</code> table reference
     */
    public DB_Zenodo(String alias) {
        this(DSL.name(alias), ZENODO);
    }

    /**
     * Create an aliased <code>zenodo</code> table reference
     */
    public DB_Zenodo(Name alias) {
        this(alias, ZENODO);
    }

    private DB_Zenodo(Name alias, Table<DB_ZenodoRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_Zenodo(Name alias, Table<DB_ZenodoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_Zenodo(Table<O> child, ForeignKey<O, DB_ZenodoRecord> key) {
        super(child, key, ZENODO);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DB_ZenodoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ZENODO;
    }

    @Override
    public UniqueKey<DB_ZenodoRecord> getPrimaryKey() {
        return Keys.KEY_ZENODO_PRIMARY;
    }

    @Override
    public List<UniqueKey<DB_ZenodoRecord>> getKeys() {
        return Arrays.<UniqueKey<DB_ZenodoRecord>>asList(Keys.KEY_ZENODO_PRIMARY, Keys.KEY_ZENODO_DUMP_ID);
    }

    @Override
    public List<ForeignKey<DB_ZenodoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DB_ZenodoRecord, ?>>asList(Keys.FK_ZENODO_DUMP_ID_DUMP);
    }

    public DB_Dump dump() {
        return new DB_Dump(this, Keys.FK_ZENODO_DUMP_ID_DUMP);
    }

    @Override
    public DB_Zenodo as(String alias) {
        return new DB_Zenodo(DSL.name(alias), this);
    }

    @Override
    public DB_Zenodo as(Name alias) {
        return new DB_Zenodo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Zenodo rename(String name) {
        return new DB_Zenodo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Zenodo rename(Name name) {
        return new DB_Zenodo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, String, DB_ZenodoTarget, LocalDateTime, LocalDateTime, LocalDateTime, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
