/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.Keys;
import io.github.bennofs.wdumper.jooq.tables.records.DB_DatabasechangeloglockRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_Databasechangeloglock extends TableImpl<DB_DatabasechangeloglockRecord> {

    private static final long serialVersionUID = -857257943;

    /**
     * The reference instance of <code>DATABASECHANGELOGLOCK</code>
     */
    public static final DB_Databasechangeloglock DATABASECHANGELOGLOCK = new DB_Databasechangeloglock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_DatabasechangeloglockRecord> getRecordType() {
        return DB_DatabasechangeloglockRecord.class;
    }

    /**
     * The column <code>DATABASECHANGELOGLOCK.ID</code>.
     */
    public final TableField<DB_DatabasechangeloglockRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOGLOCK.LOCKED</code>.
     */
    public final TableField<DB_DatabasechangeloglockRecord, Boolean> LOCKED = createField(DSL.name("LOCKED"), org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOGLOCK.LOCKGRANTED</code>.
     */
    public final TableField<DB_DatabasechangeloglockRecord, LocalDateTime> LOCKGRANTED = createField(DSL.name("LOCKGRANTED"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>DATABASECHANGELOGLOCK.LOCKEDBY</code>.
     */
    public final TableField<DB_DatabasechangeloglockRecord, String> LOCKEDBY = createField(DSL.name("LOCKEDBY"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>DATABASECHANGELOGLOCK</code> table reference
     */
    public DB_Databasechangeloglock() {
        this(DSL.name("DATABASECHANGELOGLOCK"), null);
    }

    /**
     * Create an aliased <code>DATABASECHANGELOGLOCK</code> table reference
     */
    public DB_Databasechangeloglock(String alias) {
        this(DSL.name(alias), DATABASECHANGELOGLOCK);
    }

    /**
     * Create an aliased <code>DATABASECHANGELOGLOCK</code> table reference
     */
    public DB_Databasechangeloglock(Name alias) {
        this(alias, DATABASECHANGELOGLOCK);
    }

    private DB_Databasechangeloglock(Name alias, Table<DB_DatabasechangeloglockRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_Databasechangeloglock(Name alias, Table<DB_DatabasechangeloglockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_Databasechangeloglock(Table<O> child, ForeignKey<O, DB_DatabasechangeloglockRecord> key) {
        super(child, key, DATABASECHANGELOGLOCK);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DB_DatabasechangeloglockRecord> getPrimaryKey() {
        return Keys.KEY_DATABASECHANGELOGLOCK_PRIMARY;
    }

    @Override
    public List<UniqueKey<DB_DatabasechangeloglockRecord>> getKeys() {
        return Arrays.<UniqueKey<DB_DatabasechangeloglockRecord>>asList(Keys.KEY_DATABASECHANGELOGLOCK_PRIMARY);
    }

    @Override
    public DB_Databasechangeloglock as(String alias) {
        return new DB_Databasechangeloglock(DSL.name(alias), this);
    }

    @Override
    public DB_Databasechangeloglock as(Name alias) {
        return new DB_Databasechangeloglock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Databasechangeloglock rename(String name) {
        return new DB_Databasechangeloglock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Databasechangeloglock rename(Name name) {
        return new DB_Databasechangeloglock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Boolean, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
