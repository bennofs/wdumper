/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.Keys;
import io.github.bennofs.wdumper.jooq.tables.records.DB_RunRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_Run extends TableImpl<DB_RunRecord> {

    private static final long serialVersionUID = 1069000922;

    /**
     * The reference instance of <code>run</code>
     */
    public static final DB_Run RUN = new DB_Run();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_RunRecord> getRecordType() {
        return DB_RunRecord.class;
    }

    /**
     * The column <code>run.id</code>.
     */
    public final TableField<DB_RunRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>run.started_at</code>.
     */
    public final TableField<DB_RunRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.finished_at</code>.
     */
    public final TableField<DB_RunRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>run.count</code>.
     */
    public final TableField<DB_RunRecord, Integer> COUNT = createField(DSL.name("count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>run.tool_version</code>.
     */
    public final TableField<DB_RunRecord, String> TOOL_VERSION = createField(DSL.name("tool_version"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>run.wdtk_version</code>.
     */
    public final TableField<DB_RunRecord, String> WDTK_VERSION = createField(DSL.name("wdtk_version"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>run.dump_date</code>.
     */
    public final TableField<DB_RunRecord, String> DUMP_DATE = createField(DSL.name("dump_date"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>run</code> table reference
     */
    public DB_Run() {
        this(DSL.name("run"), null);
    }

    /**
     * Create an aliased <code>run</code> table reference
     */
    public DB_Run(String alias) {
        this(DSL.name(alias), RUN);
    }

    /**
     * Create an aliased <code>run</code> table reference
     */
    public DB_Run(Name alias) {
        this(alias, RUN);
    }

    private DB_Run(Name alias, Table<DB_RunRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_Run(Name alias, Table<DB_RunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_Run(Table<O> child, ForeignKey<O, DB_RunRecord> key) {
        super(child, key, RUN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DB_RunRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RUN;
    }

    @Override
    public UniqueKey<DB_RunRecord> getPrimaryKey() {
        return Keys.KEY_RUN_PRIMARY;
    }

    @Override
    public List<UniqueKey<DB_RunRecord>> getKeys() {
        return Arrays.<UniqueKey<DB_RunRecord>>asList(Keys.KEY_RUN_PRIMARY);
    }

    @Override
    public DB_Run as(String alias) {
        return new DB_Run(DSL.name(alias), this);
    }

    @Override
    public DB_Run as(Name alias) {
        return new DB_Run(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Run rename(String name) {
        return new DB_Run(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Run rename(Name name) {
        return new DB_Run(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, LocalDateTime, Integer, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
