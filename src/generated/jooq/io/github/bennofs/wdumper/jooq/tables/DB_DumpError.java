/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.Keys;
import io.github.bennofs.wdumper.jooq.enums.DB_DumpErrorLevel;
import io.github.bennofs.wdumper.jooq.tables.records.DB_DumpErrorRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_DumpError extends TableImpl<DB_DumpErrorRecord> {

    private static final long serialVersionUID = -756055242;

    /**
     * The reference instance of <code>dump_error</code>
     */
    public static final DB_DumpError DUMP_ERROR = new DB_DumpError();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_DumpErrorRecord> getRecordType() {
        return DB_DumpErrorRecord.class;
    }

    /**
     * The column <code>dump_error.id</code>.
     */
    public final TableField<DB_DumpErrorRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dump_error.logged_at</code>.
     */
    public final TableField<DB_DumpErrorRecord, LocalDateTime> LOGGED_AT = createField(DSL.name("logged_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>dump_error.dump_id</code>.
     */
    public final TableField<DB_DumpErrorRecord, Integer> DUMP_ID = createField(DSL.name("dump_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dump_error.run_id</code>.
     */
    public final TableField<DB_DumpErrorRecord, Integer> RUN_ID = createField(DSL.name("run_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dump_error.level</code>.
     */
    public final TableField<DB_DumpErrorRecord, DB_DumpErrorLevel> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(io.github.bennofs.wdumper.jooq.enums.DB_DumpErrorLevel.class), this, "");

    /**
     * The column <code>dump_error.message</code>.
     */
    public final TableField<DB_DumpErrorRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>dump_error.zenodo_id</code>.
     */
    public final TableField<DB_DumpErrorRecord, Integer> ZENODO_ID = createField(DSL.name("zenodo_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>dump_error</code> table reference
     */
    public DB_DumpError() {
        this(DSL.name("dump_error"), null);
    }

    /**
     * Create an aliased <code>dump_error</code> table reference
     */
    public DB_DumpError(String alias) {
        this(DSL.name(alias), DUMP_ERROR);
    }

    /**
     * Create an aliased <code>dump_error</code> table reference
     */
    public DB_DumpError(Name alias) {
        this(alias, DUMP_ERROR);
    }

    private DB_DumpError(Name alias, Table<DB_DumpErrorRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_DumpError(Name alias, Table<DB_DumpErrorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_DumpError(Table<O> child, ForeignKey<O, DB_DumpErrorRecord> key) {
        super(child, key, DUMP_ERROR);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DB_DumpErrorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DUMP_ERROR;
    }

    @Override
    public UniqueKey<DB_DumpErrorRecord> getPrimaryKey() {
        return Keys.KEY_DUMP_ERROR_PRIMARY;
    }

    @Override
    public List<UniqueKey<DB_DumpErrorRecord>> getKeys() {
        return Arrays.<UniqueKey<DB_DumpErrorRecord>>asList(Keys.KEY_DUMP_ERROR_PRIMARY);
    }

    @Override
    public List<ForeignKey<DB_DumpErrorRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DB_DumpErrorRecord, ?>>asList(Keys.FK_DUMP_ERROR_DUMP_ID_DUMP, Keys.FK_DUMP_ERROR_RUN_ID_RUN, Keys.FK_DUMP_ERROR_ZENODO_ID_ZENODO);
    }

    public DB_Dump dump() {
        return new DB_Dump(this, Keys.FK_DUMP_ERROR_DUMP_ID_DUMP);
    }

    public DB_Run run() {
        return new DB_Run(this, Keys.FK_DUMP_ERROR_RUN_ID_RUN);
    }

    public DB_Zenodo zenodo() {
        return new DB_Zenodo(this, Keys.FK_DUMP_ERROR_ZENODO_ID_ZENODO);
    }

    @Override
    public DB_DumpError as(String alias) {
        return new DB_DumpError(DSL.name(alias), this);
    }

    @Override
    public DB_DumpError as(Name alias) {
        return new DB_DumpError(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_DumpError rename(String name) {
        return new DB_DumpError(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_DumpError rename(Name name) {
        return new DB_DumpError(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, Integer, Integer, DB_DumpErrorLevel, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
