/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.tables.records.DB_DatabasechangelogRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_Databasechangelog extends TableImpl<DB_DatabasechangelogRecord> {

    private static final long serialVersionUID = 1047550910;

    /**
     * The reference instance of <code>DATABASECHANGELOG</code>
     */
    public static final DB_Databasechangelog DATABASECHANGELOG = new DB_Databasechangelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_DatabasechangelogRecord> getRecordType() {
        return DB_DatabasechangelogRecord.class;
    }

    /**
     * The column <code>DATABASECHANGELOG.ID</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.AUTHOR</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> AUTHOR = createField(DSL.name("AUTHOR"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.FILENAME</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> FILENAME = createField(DSL.name("FILENAME"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.DATEEXECUTED</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, LocalDateTime> DATEEXECUTED = createField(DSL.name("DATEEXECUTED"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.ORDEREXECUTED</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, Integer> ORDEREXECUTED = createField(DSL.name("ORDEREXECUTED"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.EXECTYPE</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> EXECTYPE = createField(DSL.name("EXECTYPE"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>DATABASECHANGELOG.MD5SUM</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> MD5SUM = createField(DSL.name("MD5SUM"), org.jooq.impl.SQLDataType.VARCHAR(35).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.DESCRIPTION</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.COMMENTS</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> COMMENTS = createField(DSL.name("COMMENTS"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.TAG</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> TAG = createField(DSL.name("TAG"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.LIQUIBASE</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> LIQUIBASE = createField(DSL.name("LIQUIBASE"), org.jooq.impl.SQLDataType.VARCHAR(20).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.CONTEXTS</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> CONTEXTS = createField(DSL.name("CONTEXTS"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.LABELS</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> LABELS = createField(DSL.name("LABELS"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>DATABASECHANGELOG.DEPLOYMENT_ID</code>.
     */
    public final TableField<DB_DatabasechangelogRecord, String> DEPLOYMENT_ID = createField(DSL.name("DEPLOYMENT_ID"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>DATABASECHANGELOG</code> table reference
     */
    public DB_Databasechangelog() {
        this(DSL.name("DATABASECHANGELOG"), null);
    }

    /**
     * Create an aliased <code>DATABASECHANGELOG</code> table reference
     */
    public DB_Databasechangelog(String alias) {
        this(DSL.name(alias), DATABASECHANGELOG);
    }

    /**
     * Create an aliased <code>DATABASECHANGELOG</code> table reference
     */
    public DB_Databasechangelog(Name alias) {
        this(alias, DATABASECHANGELOG);
    }

    private DB_Databasechangelog(Name alias, Table<DB_DatabasechangelogRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_Databasechangelog(Name alias, Table<DB_DatabasechangelogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_Databasechangelog(Table<O> child, ForeignKey<O, DB_DatabasechangelogRecord> key) {
        super(child, key, DATABASECHANGELOG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public DB_Databasechangelog as(String alias) {
        return new DB_Databasechangelog(DSL.name(alias), this);
    }

    @Override
    public DB_Databasechangelog as(Name alias) {
        return new DB_Databasechangelog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Databasechangelog rename(String name) {
        return new DB_Databasechangelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Databasechangelog rename(Name name) {
        return new DB_Databasechangelog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<String, String, String, LocalDateTime, Integer, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
