/*
 * This file is generated by jOOQ.
 */
package io.github.bennofs.wdumper.jooq.tables;


import io.github.bennofs.wdumper.jooq.DefaultSchema;
import io.github.bennofs.wdumper.jooq.Indexes;
import io.github.bennofs.wdumper.jooq.Keys;
import io.github.bennofs.wdumper.jooq.tables.records.DB_DumpRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DB_Dump extends TableImpl<DB_DumpRecord> {

    private static final long serialVersionUID = -348569904;

    /**
     * The reference instance of <code>dump</code>
     */
    public static final DB_Dump DUMP = new DB_Dump();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DB_DumpRecord> getRecordType() {
        return DB_DumpRecord.class;
    }

    /**
     * The column <code>dump.id</code>.
     */
    public final TableField<DB_DumpRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>dump.title</code>.
     */
    public final TableField<DB_DumpRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>dump.spec</code>.
     */
    public final TableField<DB_DumpRecord, String> SPEC = createField(DSL.name("spec"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>dump.created_at</code>.
     */
    public final TableField<DB_DumpRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>dump.run_id</code>.
     */
    public final TableField<DB_DumpRecord, Integer> RUN_ID = createField(DSL.name("run_id"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dump.compressed_size</code>.
     */
    public final TableField<DB_DumpRecord, Long> COMPRESSED_SIZE = createField(DSL.name("compressed_size"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>dump.entity_count</code>.
     */
    public final TableField<DB_DumpRecord, Long> ENTITY_COUNT = createField(DSL.name("entity_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>dump.statement_count</code>.
     */
    public final TableField<DB_DumpRecord, Long> STATEMENT_COUNT = createField(DSL.name("statement_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>dump.triple_count</code>.
     */
    public final TableField<DB_DumpRecord, Long> TRIPLE_COUNT = createField(DSL.name("triple_count"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>dump.description</code>.
     */
    public final TableField<DB_DumpRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>dump</code> table reference
     */
    public DB_Dump() {
        this(DSL.name("dump"), null);
    }

    /**
     * Create an aliased <code>dump</code> table reference
     */
    public DB_Dump(String alias) {
        this(DSL.name(alias), DUMP);
    }

    /**
     * Create an aliased <code>dump</code> table reference
     */
    public DB_Dump(Name alias) {
        this(alias, DUMP);
    }

    private DB_Dump(Name alias, Table<DB_DumpRecord> aliased) {
        this(alias, aliased, null);
    }

    private DB_Dump(Name alias, Table<DB_DumpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DB_Dump(Table<O> child, ForeignKey<O, DB_DumpRecord> key) {
        super(child, key, DUMP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DUMP_IX_DUMP_CREATED_AT);
    }

    @Override
    public Identity<DB_DumpRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DUMP;
    }

    @Override
    public UniqueKey<DB_DumpRecord> getPrimaryKey() {
        return Keys.KEY_DUMP_PRIMARY;
    }

    @Override
    public List<UniqueKey<DB_DumpRecord>> getKeys() {
        return Arrays.<UniqueKey<DB_DumpRecord>>asList(Keys.KEY_DUMP_PRIMARY);
    }

    @Override
    public List<ForeignKey<DB_DumpRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DB_DumpRecord, ?>>asList(Keys.FK_DUMP_RUN_ID_RUN);
    }

    public DB_Run run() {
        return new DB_Run(this, Keys.FK_DUMP_RUN_ID_RUN);
    }

    @Override
    public DB_Dump as(String alias) {
        return new DB_Dump(DSL.name(alias), this);
    }

    @Override
    public DB_Dump as(Name alias) {
        return new DB_Dump(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Dump rename(String name) {
        return new DB_Dump(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DB_Dump rename(Name name) {
        return new DB_Dump(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, LocalDateTime, Integer, Long, Long, Long, Long, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
